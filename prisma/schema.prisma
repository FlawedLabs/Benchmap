generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  sessions      Session[]
  accounts      Account[]
  reviews       Review[]
  benchLikes    BenchLike[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model Bench {
  id         String      @id @default(uuid())
  title      String
  slug       String      @unique
  latitude   Float
  longitude  Float
  address    String?
  openFrom   String?
  openUntil  String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  tags       Tag[]
  reviews    Review[]
  benchLikes BenchLike[]

  @@map("bench")
}

model BenchLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  benchId String
  bench   Bench  @relation(fields: [benchId], references: [id], onDelete: Cascade)

  @@unique([userId, benchId])
  @@map("bench_like")
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  benches   Bench[]
  reviews   Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  color     Color

  @@map("tag")
}

model Review {
  id        String   @id @default(uuid())
  comment   String
  rating    Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviewerId String
  reviewer   User   @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  benchId String
  bench   Bench  @relation(fields: [benchId], references: [id], onDelete: Cascade)

  tags Tag[]

  @@map("review")
}

enum Color {
  red
  orange
  amber
  yellow
  lime
  green
  emerald
  teal
  cyan
  sky
  blue
  indigo
  violet
  purple
  fuchsia
  pink
  rose
  slate
  gray
  zinc
  neutral
  stone
}
